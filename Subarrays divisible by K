class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        unordered_map<int, int> remainder_count;
    remainder_count[0] = 1; // Base case: one way to get sum % k == 0
    int prefix_sum = 0, count = 0;

    for (int num : nums) {
        prefix_sum += num;
        int remainder = prefix_sum % k;
        
        // Handle negative remainders
        if (remainder < 0) remainder += k;

        // If this remainder has been seen before, it means subarrays exist
        if (remainder_count.find(remainder) != remainder_count.end()) {
            count += remainder_count[remainder]; 
        }

        // Store the remainder count
        remainder_count[remainder]++;
    }
    
    return count;
}

            
        

        

        
    
};
