#include <bits/stdc++.h>
using namespace std;

// Custom lower_bound: first index where arr[i] >= x
int lowerbound(vector<int>& arr, int x) {
    int n = arr.size();
    int ans = n;  // default: not found, return n
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] >= x) {
            ans = mid;       // possible answer
            high = mid - 1;  // try to find earlier index
        } else {
            low = mid + 1;
        }
    }
    return ans;
}

// Custom upper_bound: first index where arr[i] > x
int higherbound(vector<int>& arr, int x) {
    int n = arr.size();
    int ans = n;  // default: not found, return n
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] > x) {
            ans = mid;       // possible answer
            high = mid - 1;  // try to find earlier index
        } else {
            low = mid + 1;
        }
    }
    return ans;
}

int main() {
    int n;
    cout << "Size of arr: ";
    cin >> n;
    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Target: ";
    int x;
    cin >> x;

    int lb = lowerbound(arr, x);
    int ub = higherbound(arr, x);

    if (lb == n)
        cout << "No element >= " << x << " found.\n";
    else
        cout << "Lower bound index: " << lb 
             << " (value = " << arr[lb] << ")\n";

    if (ub == n)
        cout << "No element > " << x << " found.\n";
    else
        cout << "Upper bound index: " << ub 
             << " (value = " << arr[ub] << ")\n";

    return 0;
}
