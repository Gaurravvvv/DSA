class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int ind = -1 ;
        int n = nums.size() ;
        for(int i = n-2 ; i>=0 ; i--){        // find a breaking point such that arr[i] < arr[i+1] , store .
            if(nums[i]<nums[i+1]){
                ind = i ;
                break ;
            }
        }

        if(ind == -1){
            reverse(nums.begin() , nums.end()); // if ind == -1 , it is last perm , so reverse it .
            return ;
        }

        for(int i = n-1 ; i>ind ; i--){
            if(nums[i]>nums[ind]){
                swap(nums[i] , nums[ind]); // suffix after breaking point is always in desc order , so swap first bigger num  
                break ;
            }
        }

        reverse(nums.begin()+ind+1 , nums.end()); // reverse from ind+1 to end ( suffix part )
        
    }
};
